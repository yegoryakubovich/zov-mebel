import urllib

import requests

import db
import telebot  # pip3 install pytelegrambotapi
import configparser
import os

config = configparser.ConfigParser()
config.read('config.ini', encoding="utf-8")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã

THIS_FOLDER = os.path.dirname(os.path.abspath(__file__))
TOKEN = config['settings']['token']
GROUP = config['settings']['group']

texts = {

    'welcome_name': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:',
    'welcome_surname': '–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é:',
    'welcome_address': '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å:',
    'suc_application': '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n'
                       '–ò–º—è: {}\n'
                       '–§–∞–º–∏–ª–∏—è: {}\n'
                       '–ê–¥—Ä–µ—Å: {}\n\n'
                       '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –º—ã –æ–ø–µ–≤–µ—Å—Ç–∏–º –í–∞—Å –ø–æ –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—é!',
    'adm_suc_application': '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n'
                           '–ò–º—è: {}\n'
                           '–§–∞–º–∏–ª–∏—è: {}\n'
                           '–ê–¥—Ä–µ—Å: {}\n\n'
                           '–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',

    'fail_menu': '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ!\n\n'
                 '–ò–º—è: {}\n'
                 '–§–∞–º–∏–ª–∏—è: {}\n'
                 '–ê–¥—Ä–µ—Å: {}\n\n'
                 '–ú—ã –æ–ø–µ–≤–µ—Å—Ç–∏–º –í–∞—Å –ø–æ—Å–ª–µ –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—é!',

    'error_cmd': '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',

    'suc_adm': '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
    'new_app': '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {}\n'
               '–ò–º—è: {}\n'
               '–§–∞–º–∏–ª–∏—è: {}\n'
               '–ê–¥—Ä–µ—Å: {}\n\n'
               '–ü—Ä–∏–º–∏—Ç–µ, –∏–ª–∏ –æ—Ç–∫–∞–∂–∏—Ç–µ –∑–∞—è–≤–∫—É.',
    'fail_new_app': '–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!',
    'fail_adm_msg': '–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!',
    'fail_new_app_adm': '–ó–∞—è–≤–∫–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {}.',
    'fail_msg_adm': '–°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {}.',
    'fail_new_news_adm': '–ù–æ–≤–æ—Å—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {}.',

    'adm_news_date': '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–æ–≤–æ—Å—Ç–∏, –∫ –ø—Ä–∏–º–µ—Ä—É: 04.05.2021',
    'adm_news_img': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
    'adm_news_text': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏.',
    'adm_news_url': '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–∏.',
    'adm_news_status': '–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n'
                       '[{}%] {}',

    'adm_news': '–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å!\n\n'
                '–î–∞—Ç–∞: {}\n'
                '–¢–µ–∫—Å—Ç: {}\n'
                '–°—Å—ã–ª–∫–∞: <a href="{}">—Ç—ã–∫</a>\n'
                '–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞.',

    'adm_approve_app': '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞',
    'adm_deny_app': '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–∞–∑–∞–Ω–∞',

    'back_adm': '–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
    'back_main': '–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',

    'approve_app': '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à–∞ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!',
    'deny_app': '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–∞–∑–∞–Ω–∞!',

    'news_date': '–ü–æ–∫–∞–∑–∞–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ {} –≥.',


    'catalogs': '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href="https://drive.google.com/drive/folders/13jtn6PW-LPrFNP6RSFeUKWaKJnfbpwHw">—Å—Å—ã–ª–∫–µ</a> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤',
    'prices': '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href="https://drive.google.com/drive/folders/1MSW6JcW1iibgnsMTh2nC2CeEjtuDsgix">—Å—Å—ã–ª–∫–µ</a> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–π—Å–∞.',

    'suc_message': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –í–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
    'fail_message': '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.',
    'suc_new_massage': '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å, –º—ã —É–≤–µ–¥–æ–º–∏–º –í–∞—Å –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –Ω–µ–≥–æ!',
    'adm_new_massage': '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n'
                       '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="t.me/{}">{} {}</a> | id{}\n'
                       '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {}\n\n'
                       '–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',

    'suc_adm_msg': '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n'
                   '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} {} | id{}\n'
                   '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {}\n\n'
                   '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç.',

    'suc_adm_send': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n'
                    '–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',

    'suc_send': '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n'
                '–í–æ–ø—Ä–æ—Å: {}\n'
                '–û—Ç–≤–µ—Ç: {}',

    'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',
}

# –ú–∞—Å—Å–∏–≤—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

reg = []
adm_applications = None
adm_messages = None
adm_news = None
new_news = {
    'date': None,
    'text': None,
    'url': None,
    'img': None,
}
in_news = []

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

kb_main = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
kb_main.row('üì∞ –ù–æ–≤–æ—Å—Ç–∏')
kb_main.row('üìÇ –ö–∞—Ç–∞–ª–æ–≥–∏', 'üìÉ –ü—Ä–∞–π—Å—ã')
kb_main.row('‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º')

kb_adm = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
kb_adm.row('–ó–∞—è–≤–∫–∏', '–°–æ–æ–±—â–µ–Ω–∏—è')
kb_adm.row('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å')
kb_adm.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')

kb_adm_app = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
kb_adm_app.row('–ü—Ä–∏–Ω—è—Ç—å', '–û—Ç–∫–∞–∑–∞—Ç—å')
kb_adm_app.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')

kb_back = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
kb_back.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')


bot = telebot.TeleBot(TOKEN)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ - –±–æ—Ç


def give_kb(date):
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)

    kb.row('<', date, '>')
    kb.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    return kb


def give_news(text, url):
    news = '{}\n\n' \
           '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ <a href="{}">—Å—Å—ã–ª–∫–µ</a>.'.format(text, url)
    return news


def send_news(user_id, news, params=None):
    try:
        img_file = open('photos/' + news['img'], 'rb')
        if not params:
            text = give_news(news['text'], news['url'])
            bot.send_photo(user_id, img_file, text, reply_markup=give_kb(news['date']), parse_mode='HTML')
        else:
            text = texts['adm_news'].format(news['date'], news['text'], news['url'])
            bot.send_photo(user_id, img_file, text, parse_mode='HTML')
    except:
        print('–û—à–∏–±–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    user_id = message.from_user.id
    try:
        if db.Account.exits(user_id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            user = db.Account.select(user_id)
            msg = message.text
            if user['status'] == 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø

                if msg == '/adm' and db.Admin.exits(user_id):
                    bot.send_message(chat_id=user_id,
                                     text=texts['suc_adm'],
                                     reply_markup=kb_adm
                                     )
                    bot.register_next_step_handler(message, adm)

                elif msg == 'üì∞ –ù–æ–≤–æ—Å—Ç–∏':
                    date = db.News.select_dates()[0]
                    news = db.News.select(date)
                    bot.send_message(user_id, texts['news_date'].format(date))
                    for i in news:
                        send_news(user_id, i)


                    in_news.append({
                        'user_id': user_id,
                        'date': date
                    })
                    bot.register_next_step_handler(message, bot_news)

                elif msg == '‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º':
                    if not db.Message.exits(user_id):
                        bot.send_message(user_id, texts['suc_message'], reply_markup=kb_back)
                        bot.register_next_step_handler(message, messages)
                    else:
                        bot.send_message(user_id, texts['fail_message'], reply_markup=kb_main)
                elif msg == 'üìÇ –ö–∞—Ç–∞–ª–æ–≥–∏':
                    bot.send_message(user_id, texts['catalogs'], parse_mode='HTML')

                elif msg == 'üìÉ –ü—Ä–∞–π—Å—ã':
                    bot.send_message(user_id, texts['prices'], parse_mode='HTML')

                else:
                    bot.send_message(chat_id=user_id,
                                     text=texts['error_cmd'],
                                     reply_markup=kb_main
                                     )
            elif user['status'] == -1:  # –ó–∞—è–≤–∫–∞ –æ—Ç–∫–∞–∑–∞–Ω–∞
                bot.send_message(chat_id=user_id,
                                 text=texts['deny_app'])
            else:
                bot.send_message(chat_id=user_id,
                                 text=texts['fail_menu'].format(
                                     user['name'],
                                     user['surname'],
                                     user['address']
                                 ))
        else:
            reg.append({
                'id': user_id,
                'name': None,
                'surname': None,
                "address": None
            })
            bot.send_message(chat_id=user_id,
                             text=texts['welcome_name'])
            bot.register_next_step_handler(message, reg_name)

    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])


def messages(message):
    user_id = message.from_user.id
    try:

        msg = message.text

        if msg == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            bot.send_message(chat_id=user_id,
                             text=texts['back_main'],
                             reply_markup=kb_main)

        else:
            username = message.from_user.username
            user = db.Account.select(user_id)
            db.Message.insert(user_id, msg)
            bot.send_message(user_id, texts['suc_new_massage'], reply_markup=kb_main)
            bot.send_message(GROUP, texts['adm_new_massage'].format(username, user['name'], user['surname'], user_id, msg), parse_mode='html')


    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, messages)


def bot_news(message):
    user_id = message.from_user.id
    try:

        msg = message.text

        if msg == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            bot.send_message(chat_id=user_id,
                             text=texts['back_main'],
                             reply_markup=kb_main)
            for user in in_news:
                if user['user_id'] == user_id:
                    in_news.remove(user)

        else:

            dates = db.News.select_dates()

            for user in in_news:
                if user['user_id'] == user_id:
                    —Å = 0
                    if msg == '<':
                        c = 1
                        index = dates.index(user['date']) - 1
                        date = dates[index]
                        news = db.News.select(date)

                    elif msg == '>':
                        c = 1
                        index = dates.index(user['date']) + 1
                        if len(dates) - 1 < index:
                            index = 0

                        date = dates[index]
                        news = db.News.select(date)

                    if c == 0:
                        bot.send_message(chat_id=user_id,
                                         text=texts['error_cmd'],
                                         reply_markup=kb_adm)
                        bot.register_next_step_handler(message, bot_news)

                    else:
                        user['date'] = date
                        bot.send_message(user_id, texts['news_date'].format(date))
                        for i in news:
                            send_news(user_id, i)
                        bot.register_next_step_handler(message, bot_news)

    except:
        for user in in_news:
            if user['user_id'] == user_id:
                in_news.remove(user)
        bot.send_message(chat_id=user_id,
                         text=texts['error'])


def adm(message):
    user_id = message.from_user.id
    try:

        global adm_applications
        global adm_news
        global adm_messages
        msg = message.text

        if msg == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            bot.send_message(chat_id=user_id,
                             text=texts['back_main'],
                             reply_markup=kb_main)

        elif msg == '–ó–∞—è–≤–∫–∏':
            app = db.application_select()
            if app:
                if not adm_applications:
                    adm_applications = user_id
                    bot.send_message(chat_id=user_id,
                                     text=texts['new_app'].format(
                                         app['user_id'],
                                         app['name'],
                                         app['surname'],
                                         app['address']
                                     ),
                                     reply_markup=kb_adm_app)
                    bot.register_next_step_handler(message, adm_app)
                else:
                    bot.send_message(chat_id=user_id,
                                     text=texts['fail_new_app_adm'].format(adm_applications),
                                     reply_markup=kb_adm)
                    bot.register_next_step_handler(message, adm)
            else:
                bot.send_message(chat_id=user_id,
                                 text=texts['fail_new_app'].format(adm_applications),
                                 reply_markup=kb_adm)
                bot.register_next_step_handler(message, adm)

        elif msg == '–°–æ–æ–±—â–µ–Ω–∏—è':
            new_msg = db.Message.select()
            if new_msg:
                if not adm_messages:
                    adm_messages = user_id
                    user = db.Account.select(new_msg['user_id'])
                    bot.send_message(chat_id=user_id,
                                     text=texts['suc_adm_msg'].format(
                                         user['name'], user['surname'],
                                         user['user_id'],
                                         new_msg['text']
                                     ),
                                     reply_markup=kb_back)
                    bot.register_next_step_handler(message, adm_msg)
                else:
                    bot.send_message(chat_id=user_id,
                                     text=texts['fail_msg_adm'].format(adm_applications),
                                     reply_markup=kb_adm)
                    bot.register_next_step_handler(message, adm)
            else:
                bot.send_message(chat_id=user_id,
                                 text=texts['fail_adm_msg'].format(adm_applications),
                                 reply_markup=kb_adm)
                bot.register_next_step_handler(message, adm)

        elif msg == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
            if not adm_news:
                adm_news = user_id
                bot.send_message(chat_id=user_id,
                                 text=texts['adm_news_date'],
                                 reply_markup=kb_back)
                bot.register_next_step_handler(message, adm_news_date)
            else:
                bot.send_message(chat_id=user_id,
                                 text=texts['fail_new_news_adm'].format(adm_applications),
                                 reply_markup=kb_adm)
                bot.register_next_step_handler(message, adm)

        else:
            bot.send_message(chat_id=user_id,
                             text=texts['error_cmd'],
                             reply_markup=kb_adm)
            bot.register_next_step_handler(message, adm)

    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, adm)


def adm_msg(message):
    user_id = message.from_user.id
    try:
        msg = message.text
        new_msg = db.Message.select()
        adm_messages = None

        if msg == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            bot.send_message(chat_id=user_id,
                             text=texts['back_adm'],
                             reply_markup=kb_adm)
            bot.register_next_step_handler(message, adm)

        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(chat_id=user_id,
                             text=texts['suc_send'].format(new_msg['text'], msg),
                             reply_markup=kb_adm)
            db.Message.update_status(new_msg['user_id'])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            bot.send_message(chat_id=user_id,
                         text=texts['suc_adm_send'],
                         reply_markup=kb_adm)
            bot.register_next_step_handler(message, adm)

    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, adm_msg)


def adm_app(message):
    user_id = message.from_user.id
    try:
        global adm_applications
        msg = message.text
        app = db.application_select()
        adm_applications = None
        if msg == '–ü—Ä–∏–Ω—è—Ç—å':
            db.Account.update_status(app['user_id'], 1)
            bot.send_message(chat_id=user_id,
                             text=texts['adm_approve_app'],
                             reply_markup=kb_adm)
            bot.register_next_step_handler(message, adm)

            bot.send_message(chat_id=app['user_id'],
                             text=texts['approve_app'],
                             reply_markup=kb_main)

        elif msg == '–û—Ç–∫–∞–∑–∞—Ç—å':
            db.Account.update_status(app['user_id'], -1)
            bot.send_message(chat_id=user_id,
                             text=texts['adm_deny_app'],
                             reply_markup=kb_adm)
            bot.register_next_step_handler(message, adm)

            bot.send_message(chat_id=app['user_id'],
                             text=texts['deny_app'])

        else:
            bot.send_message(chat_id=user_id,
                             text=texts['back_adm'],
                             reply_markup=kb_adm)
            bot.register_next_step_handler(message, adm)

    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, adm)


def adm_news_date(message):
    user_id = message.from_user.id
    try:
        global adm_news
        msg = message.text
        if msg == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            adm_news = None
            bot.send_message(chat_id=user_id,
                             text=texts['back_adm'],
                             reply_markup=kb_adm)
            bot.register_next_step_handler(message, adm)

        else:
            new_news['date'] = msg
            bot.send_message(chat_id=user_id,
                             text=texts['adm_news_img'],
                             reply_markup=kb_back)
            bot.register_next_step_handler(message, adm_news_img)

    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, adm_news_date)


def adm_news_img(message):
    user_id = message.from_user.id
    try:
        global adm_news
        msg = message.text
        if msg == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            adm_news = None
            bot.send_message(chat_id=user_id,
                             text=texts['back_adm'],
                             reply_markup=kb_adm)
            bot.register_next_step_handler(message, adm)

        else:

            file_info = bot.get_file(message.photo[-1].file_id)
            file_name = file_info.file_path.replace("photos/", "")
            file_path = file_info.file_path
            url = 'http://api.telegram.org/file/bot{}/{}'.format(TOKEN, file_path)  # –°—Å—ã–ª–∫–µ
            file_path = os.path.join(THIS_FOLDER, file_info.file_path)
            urllib.request.urlretrieve(url, file_path)

            new_news['img'] = file_name
            bot.send_message(chat_id=user_id,
                             text=texts['adm_news_text'],
                             reply_markup=kb_back)
            bot.register_next_step_handler(message, adm_news_text)

    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, adm_news_img)


def adm_news_text(message):
    user_id = message.from_user.id
    try:
        global adm_news
        msg = message.text
        if msg == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            adm_news = None
            bot.send_message(chat_id=user_id,
                             text=texts['back_adm'],
                             reply_markup=kb_adm)
            bot.register_next_step_handler(message, adm)

        else:
            new_news['text'] = msg
            bot.send_message(chat_id=user_id,
                             text=texts['adm_news_url'],
                             reply_markup=kb_back)
            bot.register_next_step_handler(message, adm_news_url)

    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, adm_news_text)


def adm_news_url(message):
    user_id = message.from_user.id
    try:
        global adm_news
        msg = message.text
        if msg == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
            adm_news = None
            bot.send_message(chat_id=user_id,
                             text=texts['back_adm'],
                             reply_markup=kb_adm)
            bot.register_next_step_handler(message, adm)

        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            new_news['url'] = msg
            db.News.insert(new_news['date'], new_news['text'], new_news['url'], new_news['img'])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
            send_news(GROUP, new_news, True)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            accounts = db.Account.select_all_user_id()
            len_accounts = len(accounts) - 1
            one = 1*100/len_accounts
            one_symb = 1*20/len_accounts
            message_data = bot.send_message(user_id, texts['adm_news_status'].format(0, ''))
            message_id = message_data.message_id

            count = 0
            for i in accounts:
                if i != user_id:
                    send_news(i, new_news)
                    count += 1
                    bot.edit_message_text(chat_id=user_id,
                                          message_id=message_id,
                                          text=texts['adm_news_status'].format(int(one*count), int(one_symb)*'#'))

            bot.edit_message_text(chat_id=user_id,
                                  message_id=message_id,
                                  text=texts['adm_news_status'].format(100, '#'*20))

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
            bot.send_message(chat_id=user_id,
                             text=texts['back_adm'],
                             reply_markup=kb_adm)
            adm_news = None
            bot.register_next_step_handler(message, adm)

    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, adm_news_url)


def reg_name(message):
    user_id = message.from_user.id
    try:
        for user in reg:
            if user['id'] == user_id:
                user['name'] = message.text
                bot.send_message(chat_id=user_id,
                                 text=texts['welcome_surname'])
                bot.register_next_step_handler(message, reg_surname)
    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, reg_name)


def reg_surname(message):
    user_id = message.from_user.id
    try:
        for user in reg:
            if user['id'] == user_id:
                user['surname'] = message.text
                bot.send_message(chat_id=user_id,
                                 text=texts['welcome_address'])
                bot.register_next_step_handler(message, reg_address)
    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, reg_surname)


def reg_address(message):
    user_id = message.from_user.id
    try:
        for user in reg:
            if user['id'] == user_id:
                user['address'] = message.text
                db.Account.insert(user_id,
                                  user['name'],
                                  user['surname'],
                                  user['address'])
                bot.send_message(chat_id=user_id,
                                 text=texts['suc_application'].format(
                                     user['name'],
                                     user['surname'],
                                     user['address']
                                 ))
                bot.send_message(chat_id=GROUP,
                                 text=texts['adm_suc_application'].format(
                                     user['name'],
                                     user['surname'],
                                     user['address']
                                 ))
    except:
        bot.send_message(chat_id=user_id,
                         text=texts['error'])
        bot.register_next_step_handler(message, reg_address)


bot.polling(none_stop=True)
